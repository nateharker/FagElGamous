@inject SignInManager<AppUser> SignInManager
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager
@inject PolicyRolesDbContext context 

@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item"><a class="nav-link @ManageNavPages.IndexNavClass(ViewContext) fontdarker" id="profile" asp-page="./Index">Profile</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.EmailNavClass(ViewContext) fontdarker" id="email" asp-page="./Email">Email</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext) fontdarker" id="change-password" asp-page="./ChangePassword">Password</a></li>
    @if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext) fontdarker" asp-page="./ExternalLogins">External logins</a></li>
    }
    <li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext) fontdarker" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext) fontdarker" id="personal-data" asp-page="./PersonalData">Personal data</a></li>
    @if (Policy.IsInDeleteRole(UserManager.GetRolesAsync(UserManager.GetUserAsync(User).Result).Result, context))
    {
        <li class="nav-item"><a class="nav-link fontdarker" id="user-manager" asp-controller="UserManager" asp-action="Index">Manage Users (Admin)</a></li>
        <li class="nav-item"><a class="nav-link fontdarker" id="role-manager" asp-controller="RoleManager" asp-action="Index">Manage Roles (Admin)</a></li>
    }
</ul>
